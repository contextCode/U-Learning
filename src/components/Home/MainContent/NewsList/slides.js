export default [
    {
        id: "1",
        title: "GitHub Advisory Database now accepts community contributions",
        description: "GitHub is opening its Advisory Database to community contributions to help further secure software supply chains. One vulnerability can have a devastating “domino effect” on software across the globe. With the use of open-source increasing, so does the threat of a vast amount of software being compromised.  GitHub launched its Advisory Database almost two years ago. As the largest database of vulnerabilities in software dependencies in the world, it’s become an invaluable resource.  Until now, the database has been maintained solely by GitHub’s teams of security researchers. However, GitHub believes it can become a more powerful resource with the help of the community.  “There are community members with additional insights and intelligence on CVEs that do not have a place to share this knowledge,” explains GitHub in a blog post.  To that end, GitHub is publishing the full contents of the Advisory Database to a new public repository and launching a user interface for making contributions.  The community is able to contribute by navigating to the advisory they wish to contribute to and then submit their research through the “suggest improvements for this vulnerability” workflow. GitHub believes that free and open security data is critical to empowering the industry as a whole to best secure our software supply chains, says the company.",
        image: require("../img/github.png"),
    },
    {
        id: "2",
        title: "React 18 brings concurrent renderer, automatic batching",
        description: "Major update to the popular JavaScript framework boosts performance by rendering multiple UI versions simultaneously and batching all updates by default. ",
        text: "React 18, a major upgrade to the popular JavaScript library, has moved to a release candidate (RC) stage, highlighted by a new concurrent renderer and automatic batching of updates. Concurrent rendering allows React to prepare multiple versions of the UI at the same time. This mostly behind-the-scenes capability presents possibilities to improve app performance. New APIs were created to support concurrent rendering specific to use cases in areas such as styles, external stores, and accessibility. The developers of React have pledged a gradual adoption strategy for concurrent features. A new root API in React 18 enables the concurrent renderer, letting users opt into concurrent features. The API provides better ergonomics to manage roots. Out-of-the-box performance in React 18, meanwhile, is improved by doing more batching by default. Batching is when React groups multiple state updates into a single re-render for better performance. Previously, React only batched updates inside event handlers. Updates inside of promises, SetTimeout, native event handlers, or any other events were not batched by default. With React 18 they will be. Other new features and changes in React 18: A new development-only check was added to Strict mode. This check will unmount and remount every component whenever a component mounts for the first time, restoring the previous state on the second mount. For server rendering, react-dom/server APIs have been revamped to fully support Suspense on the server and Streaming SSR. With these changes, the old Node.js streaming API is being deprecated. Support is being dropped for Microsoft’s Internet Explorer browser. The Internet Explorer desktop application will be retired by Microsoft on June 15, 2022. ReactDOM.render is no longer supported. Use createRoot instead.    " ,
        image: require("../img/react2.png"),
    },
    {
        id: "3",
        title: "Harvard census identifies most commonly used open source packages",
        description: "Researchers hope that by raising awareness of the most widely used open source packages, they can help prevent the next Log4j or Heartbleed exploit from happening.",
        text:"Researchers at the Laboratory for Innovation Science at Harvard University (LISH) have published the most comprehensive census of free and open source (FOSS) software packages to date, with the aim of helping the industry better protect against high-profile vulnerabilities like Heartbleed and Log4shell, which impacted popular open source projects. The census comes at a time when the technology industry is being forced to contend with the risks posed by the widespread use of open source technology within critical enterprise and public sector applications. The research focuses on software packages at the application library level by aggregating data from over half a million observations of FOSS libraries used in production applications at thousands of companies in 2020. “FOSS has become a critical part of the modern economy. There are tens of millions of FOSS projects, many of which are built into software and products we use every day. However, it is difficult to fully understand the health, economic value, and security of FOSS because it is produced in a decentralized and distributed manner,” the census authors noted in their report. What’s in the report? The census is broken down into eight ranked lists. Four include version numbers and four are version agnostic. Packages that use the default JavaScript npm package manager have been split out from non-npm packages.  There are also separate lists for packages that are directly called by developers versus those that are indirectly called as dependencies, bringing attention to the kinds of deeper dependencies that are more difficult for developers to observe within their environments. These lists “represent our best estimate of which FOSS packages are the most widely used by different applications, given the limits of time and the broad, but not exhaustive, data we have aggregated,” the report notes. While the census does not attempt to identify the riskiest OSS projects, it does note that “measuring risk profiles is a separable task, and it’s easier to do it once the most widely used software is identified.” That work will require cross-industry effort and will depend on the individual risk profile of the consuming organization. For organizations that have already started to put together their software bills of materials, these lists can provide a useful reference point as to which open source packages are the most common and start to dedicate resources to ensure those projects are secure. Preventing the next Log4j The researchers hope that by raising awareness of the most commonly used open source packages, they can help prevent the next Log4j or Heartbleed exploit from happening.  “Hopefully the next Log4j is on our list and we get to it before serious problems arrive,” Frank Nagle, an author of the report and assistant professor at Harvard Business School, told InfoWorld.  The report authors hope that by identifying “critical FOSS packages” it can help spur developers and end users to share data, invest and coordinate efforts to secure key open source projects, which are often maintained by small groups of volunteer developers.  Back in 2014, following the discovery of the Heartbleed flaw, the Linux Foundation founded the Core Infrastructure Initiative (CII) in an attempt to provide better funding and support to critical FOSS projects, namely by paying maintainers and identifying critical projects and setting out security best practices. In 2020 much of these efforts were folded into the newly created Open Source Security Foundation (OpenSSF), which supported this research project.  Open source security is an issue which has caught the attention of governments around the world. The White House recently conducted meetings with public and private sector representatives to discuss the issue. That meeting aimed to discuss how to prevent security defects and vulnerabilities in open source code and packages, improving the process of finding and remediating vulnerabilities, and shortening the response time for fixing issues.  In 2014 the European Commission put into place a FOSS Strategy of its own, and a few years later it started sponsoring FOSS auditing by setting up bug bounty programs, hackathons and conferences. Other lessons learned  The report also made five broad observations about the state of enterprise usage of open source software today. These are:      There is a need for a more standardized naming schema for software components.     There remain serious complexities associated with package versioning.     Much of the most widely used FOSS is developed by only a handful of contributors.     Individual developer account security is of growing importance.     Legacy software in the open source space persists.  “Far from being the final word on critical FOSS projects, this census effort represents the beginning of a larger dialogue on how to identify vital packages and ensure they receive adequate resources and support,” the report concluded.",
        image: require("../img/npm.png"),
    },
]